
Pratica3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00000882  00000916  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000882  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  0080011e  0080011e  00000934  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000934  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000964  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  000009a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d0a  00000000  00000000  00000aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000091a  00000000  00000000  000017ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010d8  00000000  00000000  000020c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000298  00000000  00000000  000031a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007606  00000000  00000000  00003438  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006d1  00000000  00000000  0000aa3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000b10f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002c01  00000000  00000000  0000b1bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	81 c0       	rjmp	.+258    	; 0x104 <__ctors_end>
   2:	00 00       	nop
   4:	9a c0       	rjmp	.+308    	; 0x13a <__bad_interrupt>
   6:	00 00       	nop
   8:	98 c0       	rjmp	.+304    	; 0x13a <__bad_interrupt>
   a:	00 00       	nop
   c:	96 c0       	rjmp	.+300    	; 0x13a <__bad_interrupt>
   e:	00 00       	nop
  10:	94 c0       	rjmp	.+296    	; 0x13a <__bad_interrupt>
  12:	00 00       	nop
  14:	92 c0       	rjmp	.+292    	; 0x13a <__bad_interrupt>
  16:	00 00       	nop
  18:	90 c0       	rjmp	.+288    	; 0x13a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	8e c0       	rjmp	.+284    	; 0x13a <__bad_interrupt>
  1e:	00 00       	nop
  20:	8c c0       	rjmp	.+280    	; 0x13a <__bad_interrupt>
  22:	00 00       	nop
  24:	8a c0       	rjmp	.+276    	; 0x13a <__bad_interrupt>
  26:	00 00       	nop
  28:	88 c0       	rjmp	.+272    	; 0x13a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	86 c0       	rjmp	.+268    	; 0x13a <__bad_interrupt>
  2e:	00 00       	nop
  30:	84 c0       	rjmp	.+264    	; 0x13a <__bad_interrupt>
  32:	00 00       	nop
  34:	9b c1       	rjmp	.+822    	; 0x36c <__vector_13>
  36:	00 00       	nop
  38:	80 c0       	rjmp	.+256    	; 0x13a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	7e c0       	rjmp	.+252    	; 0x13a <__bad_interrupt>
  3e:	00 00       	nop
  40:	e4 c0       	rjmp	.+456    	; 0x20a <__vector_16>
  42:	00 00       	nop
  44:	7a c0       	rjmp	.+244    	; 0x13a <__bad_interrupt>
  46:	00 00       	nop
  48:	05 c2       	rjmp	.+1034   	; 0x454 <__vector_18>
  4a:	00 00       	nop
  4c:	76 c0       	rjmp	.+236    	; 0x13a <__bad_interrupt>
  4e:	00 00       	nop
  50:	74 c0       	rjmp	.+232    	; 0x13a <__bad_interrupt>
  52:	00 00       	nop
  54:	f5 c1       	rjmp	.+1002   	; 0x440 <__vector_21>
  56:	00 00       	nop
  58:	70 c0       	rjmp	.+224    	; 0x13a <__bad_interrupt>
  5a:	00 00       	nop
  5c:	6e c0       	rjmp	.+220    	; 0x13a <__bad_interrupt>
  5e:	00 00       	nop
  60:	6c c0       	rjmp	.+216    	; 0x13a <__bad_interrupt>
  62:	00 00       	nop
  64:	6a c0       	rjmp	.+212    	; 0x13a <__bad_interrupt>
  66:	00 00       	nop
  68:	e3 00       	.word	0x00e3	; ????
  6a:	e6 00       	.word	0x00e6	; ????
  6c:	e9 00       	.word	0x00e9	; ????
  6e:	ec 00       	.word	0x00ec	; ????
  70:	ef 00       	.word	0x00ef	; ????
  72:	f2 00       	.word	0x00f2	; ????
  74:	f5 00       	.word	0x00f5	; ????
  76:	f8 00       	.word	0x00f8	; ????
  78:	fb 00       	.word	0x00fb	; ????
  7a:	fe 00       	.word	0x00fe	; ????
  7c:	68 02       	muls	r22, r24
  7e:	6c 02       	muls	r22, r28
  80:	70 02       	muls	r23, r16
  82:	74 02       	muls	r23, r20
  84:	77 02       	muls	r23, r23
  86:	77 02       	muls	r23, r23
  88:	77 02       	muls	r23, r23
  8a:	77 02       	muls	r23, r23
  8c:	77 02       	muls	r23, r23
  8e:	77 02       	muls	r23, r23
  90:	77 02       	muls	r23, r23
  92:	77 02       	muls	r23, r23
  94:	77 02       	muls	r23, r23
  96:	77 02       	muls	r23, r23
  98:	77 02       	muls	r23, r23
  9a:	77 02       	muls	r23, r23
  9c:	77 02       	muls	r23, r23
  9e:	77 02       	muls	r23, r23
  a0:	77 02       	muls	r23, r23
  a2:	77 02       	muls	r23, r23
  a4:	77 02       	muls	r23, r23
  a6:	77 02       	muls	r23, r23
  a8:	77 02       	muls	r23, r23
  aa:	77 02       	muls	r23, r23
  ac:	77 02       	muls	r23, r23
  ae:	77 02       	muls	r23, r23
  b0:	77 02       	muls	r23, r23
  b2:	77 02       	muls	r23, r23
  b4:	77 02       	muls	r23, r23
  b6:	77 02       	muls	r23, r23
  b8:	77 02       	muls	r23, r23
  ba:	77 02       	muls	r23, r23
  bc:	77 02       	muls	r23, r23
  be:	77 02       	muls	r23, r23
  c0:	77 02       	muls	r23, r23
  c2:	77 02       	muls	r23, r23
  c4:	77 02       	muls	r23, r23
  c6:	77 02       	muls	r23, r23
  c8:	77 02       	muls	r23, r23
  ca:	77 02       	muls	r23, r23
  cc:	77 02       	muls	r23, r23
  ce:	77 02       	muls	r23, r23
  d0:	77 02       	muls	r23, r23
  d2:	77 02       	muls	r23, r23
  d4:	77 02       	muls	r23, r23
  d6:	77 02       	muls	r23, r23
  d8:	77 02       	muls	r23, r23
  da:	77 02       	muls	r23, r23
  dc:	47 02       	muls	r20, r23
  de:	4c 02       	muls	r20, r28
  e0:	51 02       	muls	r21, r17
  e2:	77 02       	muls	r23, r23
  e4:	77 02       	muls	r23, r23
  e6:	77 02       	muls	r23, r23
  e8:	77 02       	muls	r23, r23
  ea:	77 02       	muls	r23, r23
  ec:	77 02       	muls	r23, r23
  ee:	77 02       	muls	r23, r23
  f0:	77 02       	muls	r23, r23
  f2:	5f 02       	muls	r21, r31
  f4:	77 02       	muls	r23, r23
  f6:	77 02       	muls	r23, r23
  f8:	77 02       	muls	r23, r23
  fa:	77 02       	muls	r23, r23
  fc:	77 02       	muls	r23, r23
  fe:	77 02       	muls	r23, r23
 100:	77 02       	muls	r23, r23
 102:	56 02       	muls	r21, r22

00000104 <__ctors_end>:
 104:	11 24       	eor	r1, r1
 106:	1f be       	out	0x3f, r1	; 63
 108:	cf ef       	ldi	r28, 0xFF	; 255
 10a:	d8 e0       	ldi	r29, 0x08	; 8
 10c:	de bf       	out	0x3e, r29	; 62
 10e:	cd bf       	out	0x3d, r28	; 61

00000110 <__do_copy_data>:
 110:	11 e0       	ldi	r17, 0x01	; 1
 112:	a0 e0       	ldi	r26, 0x00	; 0
 114:	b1 e0       	ldi	r27, 0x01	; 1
 116:	e2 e8       	ldi	r30, 0x82	; 130
 118:	f8 e0       	ldi	r31, 0x08	; 8
 11a:	02 c0       	rjmp	.+4      	; 0x120 <__do_copy_data+0x10>
 11c:	05 90       	lpm	r0, Z+
 11e:	0d 92       	st	X+, r0
 120:	ae 31       	cpi	r26, 0x1E	; 30
 122:	b1 07       	cpc	r27, r17
 124:	d9 f7       	brne	.-10     	; 0x11c <__do_copy_data+0xc>

00000126 <__do_clear_bss>:
 126:	21 e0       	ldi	r18, 0x01	; 1
 128:	ae e1       	ldi	r26, 0x1E	; 30
 12a:	b1 e0       	ldi	r27, 0x01	; 1
 12c:	01 c0       	rjmp	.+2      	; 0x130 <.do_clear_bss_start>

0000012e <.do_clear_bss_loop>:
 12e:	1d 92       	st	X+, r1

00000130 <.do_clear_bss_start>:
 130:	a7 32       	cpi	r26, 0x27	; 39
 132:	b2 07       	cpc	r27, r18
 134:	e1 f7       	brne	.-8      	; 0x12e <.do_clear_bss_loop>
 136:	65 d0       	rcall	.+202    	; 0x202 <main>
 138:	a2 c3       	rjmp	.+1860   	; 0x87e <_exit>

0000013a <__bad_interrupt>:
 13a:	62 cf       	rjmp	.-316    	; 0x0 <__vectors>

0000013c <init_ADC>:
#include "ADC.h"
void init_ADC(){
	ADMUX  = 0b00000000;
 13c:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = 0b11000111;
 140:	87 ec       	ldi	r24, 0xC7	; 199
 142:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADCSRB = 0b00000110;
 146:	86 e0       	ldi	r24, 0x06	; 6
 148:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
 14c:	08 95       	ret

0000014e <Read_ADC>:
}
unsigned int Read_ADC(unsigned int PIN_ADC_ANALOG){
	int Valor_da_leitura = 0;	
	ADMUX  = PIN_ADC_ANALOG;
 14e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA |= (1<<ADSC);
 152:	ea e7       	ldi	r30, 0x7A	; 122
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	80 64       	ori	r24, 0x40	; 64
 15a:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC)){/*CONVERTENDO*/}
 15c:	80 81       	ld	r24, Z
 15e:	86 fd       	sbrc	r24, 6
 160:	fd cf       	rjmp	.-6      	; 0x15c <Read_ADC+0xe>
	Valor_da_leitura = ADC;
 162:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 166:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	return Valor_da_leitura;
}
 16a:	08 95       	ret

0000016c <board_init>:
	// 1 - OUTPUT
	// 0 - INPUT
	/************************************************************************/
	/* DEFINIÇÕES DO PORTB QUE SERÁ USADO PARA O DISPLAY                    */
	/************************************************************************/	
	DDRB  = 0b11111111;
 16c:	8f ef       	ldi	r24, 0xFF	; 255
 16e:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00000000;
 170:	15 b8       	out	0x05, r1	; 5
	
	DDRC  = 0b00010011;
 172:	83 e1       	ldi	r24, 0x13	; 19
 174:	87 b9       	out	0x07, r24	; 7
	PORTC = 0b00000000;
 176:	18 b8       	out	0x08, r1	; 8
	
	DDRD = 0b11111010;
 178:	8a ef       	ldi	r24, 0xFA	; 250
 17a:	8a b9       	out	0x0a, r24	; 10
	/************************************************************************/
	/* DEFINIÇÕES DO TC0 PARA A MULTIPLEXAÇÃO                               */
	/************************************************************************/
	TCCR0A = 0b00000000;
 17c:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0b00000011;	
 17e:	83 e0       	ldi	r24, 0x03	; 3
 180:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0b00000001;	
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	/************************************************************************/
	/* DEFINIÇÃO PARA O TC1 PARA A LEITURA DO AD                            */
	/************************************************************************/
	TCCR1A = 0b00000001;
 188:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = 0b00000101;
 18c:	95 e0       	ldi	r25, 0x05	; 5
 18e:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TCCR1C = 0b00000000;
 192:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
	TIMSK1 = 0b00000001;
 196:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	
	/************************************************************************/
	/* DEFINIÇÕES PARA GERAR ONDA PWM                                       */
	/************************************************************************/
	TCCR2A = 0b00110011;
 19a:	83 e3       	ldi	r24, 0x33	; 51
 19c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	TCCR2B = 0b00001011;
 1a0:	8b e0       	ldi	r24, 0x0B	; 11
 1a2:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	OCR2A  = 5;
 1a6:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	TIMSK2 = 0b00000000;
 1aa:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
	/************************************************************************/
	/*HABILITAR INTERRUPÇÕES GERAIS                                         */
	/************************************************************************/
	SREG = 0b10000000;
 1ae:	80 e8       	ldi	r24, 0x80	; 128
 1b0:	8f bf       	out	0x3f, r24	; 63
 1b2:	08 95       	ret

000001b4 <DISPLAY_FUNCTION_UP_NUMBER>:
#include "DEFINES_DISPLAY.h"
void DISPLAY_FUNCTION_UP_NUMBER(unsigned char NUMBER){
	PORTB = DISPLAY_CLR;
 1b4:	15 b8       	out	0x05, r1	; 5
	switch(NUMBER){
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	8a 30       	cpi	r24, 0x0A	; 10
 1ba:	91 05       	cpc	r25, r1
 1bc:	08 f5       	brcc	.+66     	; 0x200 <DISPLAY_FUNCTION_UP_NUMBER+0x4c>
 1be:	fc 01       	movw	r30, r24
 1c0:	ec 5c       	subi	r30, 0xCC	; 204
 1c2:	ff 4f       	sbci	r31, 0xFF	; 255
 1c4:	47 c3       	rjmp	.+1678   	; 0x854 <__tablejump2__>
		case 0:
			PORTB = DISPLAY_UP_0;
 1c6:	8f e3       	ldi	r24, 0x3F	; 63
 1c8:	85 b9       	out	0x05, r24	; 5
		break;
 1ca:	08 95       	ret
		case 1:
			PORTB = DISPLAY_UP_1;
 1cc:	86 e0       	ldi	r24, 0x06	; 6
 1ce:	85 b9       	out	0x05, r24	; 5
		break;
 1d0:	08 95       	ret
		case 2:
			PORTB = DISPLAY_UP_2;
 1d2:	8b e9       	ldi	r24, 0x9B	; 155
 1d4:	85 b9       	out	0x05, r24	; 5
		break;
 1d6:	08 95       	ret
		case 3:
			PORTB = DISPLAY_UP_3;
 1d8:	8f e8       	ldi	r24, 0x8F	; 143
 1da:	85 b9       	out	0x05, r24	; 5
		break;
 1dc:	08 95       	ret
		case 4:
			PORTB = DISPLAY_UP_4;
 1de:	86 ea       	ldi	r24, 0xA6	; 166
 1e0:	85 b9       	out	0x05, r24	; 5
		break;
 1e2:	08 95       	ret
		case 5:
			PORTB = DISPLAY_UP_5;
 1e4:	8d ea       	ldi	r24, 0xAD	; 173
 1e6:	85 b9       	out	0x05, r24	; 5
		break;
 1e8:	08 95       	ret
		case 6:
			PORTB = DISPLAY_UP_6;
 1ea:	8d eb       	ldi	r24, 0xBD	; 189
 1ec:	85 b9       	out	0x05, r24	; 5
		break;
 1ee:	08 95       	ret
		case 7:
			PORTB = DISPLAY_UP_7;
 1f0:	87 e0       	ldi	r24, 0x07	; 7
 1f2:	85 b9       	out	0x05, r24	; 5
		break;
 1f4:	08 95       	ret
		case 8:
			PORTB = DISPLAY_UP_8;
 1f6:	8f eb       	ldi	r24, 0xBF	; 191
 1f8:	85 b9       	out	0x05, r24	; 5
		break;
 1fa:	08 95       	ret
		case 9:
			PORTB = DISPLAY_UP_9;
 1fc:	8f ea       	ldi	r24, 0xAF	; 175
 1fe:	85 b9       	out	0x05, r24	; 5
 200:	08 95       	ret

00000202 <main>:
unsigned int ADC_READ_NUMBER=0;
unsigned int VALOR_LEITURA_PIN_SENSOR_0 = 0;
unsigned int VALOR_LEITURA_PIN_SENSOR_1 = 0;
unsigned char STATE_MACHINE = 0;
int main (void){		
	board_init();	
 202:	b4 df       	rcall	.-152    	; 0x16c <board_init>
	init_ADC();
 204:	9b df       	rcall	.-202    	; 0x13c <init_ADC>
	init_USART();
 206:	87 d1       	rcall	.+782    	; 0x516 <init_USART>
 208:	ff cf       	rjmp	.-2      	; 0x208 <main+0x6>

0000020a <__vector_16>:
 20a:	1f 92       	push	r1
	}
}
/************************************************************************/
/* INTERRUPÇÕES                                                         */
/************************************************************************/
ISR(TIMER0_OVF_vect){
 20c:	0f 92       	push	r0
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	0f 92       	push	r0
 212:	11 24       	eor	r1, r1
 214:	2f 93       	push	r18
 216:	3f 93       	push	r19
 218:	4f 93       	push	r20
 21a:	5f 93       	push	r21
 21c:	6f 93       	push	r22
 21e:	7f 93       	push	r23
 220:	8f 93       	push	r24
 222:	9f 93       	push	r25
 224:	af 93       	push	r26
 226:	bf 93       	push	r27
 228:	ef 93       	push	r30
 22a:	ff 93       	push	r31
	//TCNT0 = 0;
	PORTB = DISPLAY_CLR;	
 22c:	15 b8       	out	0x05, r1	; 5
	if(multiplexFlag){
 22e:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <multiplexFlag>
 232:	88 23       	and	r24, r24
 234:	19 f0       	breq	.+6      	; 0x23c <__vector_16+0x32>
		PORTC &= ~(1<<DISPLAY_MULTIPLEX_KEY_LEFT);
 236:	40 98       	cbi	0x08, 0	; 8
		PORTC |= (1<<DISPLAY_MULTIPLEX_KEY_RIGH);		
 238:	41 9a       	sbi	0x08, 1	; 8
 23a:	02 c0       	rjmp	.+4      	; 0x240 <__vector_16+0x36>
	}else{
		PORTC |= (1<<DISPLAY_MULTIPLEX_KEY_LEFT);
 23c:	40 9a       	sbi	0x08, 0	; 8
		PORTC &= ~(1<<DISPLAY_MULTIPLEX_KEY_RIGH);
 23e:	41 98       	cbi	0x08, 1	; 8
	}
		switch(STATE_MACHINE){
 240:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
 244:	81 30       	cpi	r24, 0x01	; 1
 246:	c1 f1       	breq	.+112    	; 0x2b8 <__vector_16+0xae>
 248:	38 f0       	brcs	.+14     	; 0x258 <__vector_16+0x4e>
 24a:	82 30       	cpi	r24, 0x02	; 2
 24c:	09 f4       	brne	.+2      	; 0x250 <__vector_16+0x46>
 24e:	3e c0       	rjmp	.+124    	; 0x2cc <__vector_16+0xc2>
 250:	83 30       	cpi	r24, 0x03	; 3
 252:	09 f4       	brne	.+2      	; 0x256 <__vector_16+0x4c>
 254:	6b c0       	rjmp	.+214    	; 0x32c <__vector_16+0x122>
 256:	73 c0       	rjmp	.+230    	; 0x33e <__vector_16+0x134>
			case 0:
				if(multiplexFlag){
 258:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <multiplexFlag>
 25c:	88 23       	and	r24, r24
 25e:	79 f0       	breq	.+30     	; 0x27e <__vector_16+0x74>
					DISPLAY_FUNCTION_UP_NUMBER(VALOR_LEITURA_PIN_SENSOR_0/10);
 260:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <VALOR_LEITURA_PIN_SENSOR_0>
 264:	30 91 22 01 	lds	r19, 0x0122	; 0x800122 <VALOR_LEITURA_PIN_SENSOR_0+0x1>
 268:	ad ec       	ldi	r26, 0xCD	; 205
 26a:	bc ec       	ldi	r27, 0xCC	; 204
 26c:	f9 d2       	rcall	.+1522   	; 0x860 <__umulhisi3>
 26e:	96 95       	lsr	r25
 270:	87 95       	ror	r24
 272:	96 95       	lsr	r25
 274:	87 95       	ror	r24
 276:	96 95       	lsr	r25
 278:	87 95       	ror	r24
 27a:	9c df       	rcall	.-200    	; 0x1b4 <DISPLAY_FUNCTION_UP_NUMBER>
 27c:	60 c0       	rjmp	.+192    	; 0x33e <__vector_16+0x134>
				}else{
					DISPLAY_FUNCTION_UP_NUMBER(VALOR_LEITURA_PIN_SENSOR_0%10);
 27e:	40 91 21 01 	lds	r20, 0x0121	; 0x800121 <VALOR_LEITURA_PIN_SENSOR_0>
 282:	30 91 22 01 	lds	r19, 0x0122	; 0x800122 <VALOR_LEITURA_PIN_SENSOR_0+0x1>
 286:	24 2f       	mov	r18, r20
 288:	ad ec       	ldi	r26, 0xCD	; 205
 28a:	bc ec       	ldi	r27, 0xCC	; 204
 28c:	e9 d2       	rcall	.+1490   	; 0x860 <__umulhisi3>
 28e:	96 95       	lsr	r25
 290:	87 95       	ror	r24
 292:	96 95       	lsr	r25
 294:	87 95       	ror	r24
 296:	96 95       	lsr	r25
 298:	87 95       	ror	r24
 29a:	9c 01       	movw	r18, r24
 29c:	22 0f       	add	r18, r18
 29e:	33 1f       	adc	r19, r19
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	88 0f       	add	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	88 0f       	add	r24, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	82 0f       	add	r24, r18
 2ae:	93 1f       	adc	r25, r19
 2b0:	48 1b       	sub	r20, r24
 2b2:	84 2f       	mov	r24, r20
 2b4:	7f df       	rcall	.-258    	; 0x1b4 <DISPLAY_FUNCTION_UP_NUMBER>
 2b6:	43 c0       	rjmp	.+134    	; 0x33e <__vector_16+0x134>
				}
			break;
			case 1:
				if(multiplexFlag){
 2b8:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <multiplexFlag>
 2bc:	88 23       	and	r24, r24
 2be:	19 f0       	breq	.+6      	; 0x2c6 <__vector_16+0xbc>
					PORTB = DISPLAY_UP_graus;
 2c0:	83 ea       	ldi	r24, 0xA3	; 163
 2c2:	85 b9       	out	0x05, r24	; 5
 2c4:	3c c0       	rjmp	.+120    	; 0x33e <__vector_16+0x134>
				}else{
					PORTB = DISPLAY_UP_C;
 2c6:	89 e3       	ldi	r24, 0x39	; 57
 2c8:	85 b9       	out	0x05, r24	; 5
 2ca:	39 c0       	rjmp	.+114    	; 0x33e <__vector_16+0x134>
				}			
			break;
			case 2:
			if(multiplexFlag){
 2cc:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <multiplexFlag>
 2d0:	88 23       	and	r24, r24
 2d2:	79 f0       	breq	.+30     	; 0x2f2 <__vector_16+0xe8>
				DISPLAY_FUNCTION_UP_NUMBER(VALOR_LEITURA_PIN_SENSOR_1/10);
 2d4:	20 91 1f 01 	lds	r18, 0x011F	; 0x80011f <VALOR_LEITURA_PIN_SENSOR_1>
 2d8:	30 91 20 01 	lds	r19, 0x0120	; 0x800120 <VALOR_LEITURA_PIN_SENSOR_1+0x1>
 2dc:	ad ec       	ldi	r26, 0xCD	; 205
 2de:	bc ec       	ldi	r27, 0xCC	; 204
 2e0:	bf d2       	rcall	.+1406   	; 0x860 <__umulhisi3>
 2e2:	96 95       	lsr	r25
 2e4:	87 95       	ror	r24
 2e6:	96 95       	lsr	r25
 2e8:	87 95       	ror	r24
 2ea:	96 95       	lsr	r25
 2ec:	87 95       	ror	r24
 2ee:	62 df       	rcall	.-316    	; 0x1b4 <DISPLAY_FUNCTION_UP_NUMBER>
 2f0:	26 c0       	rjmp	.+76     	; 0x33e <__vector_16+0x134>
				}else{
				DISPLAY_FUNCTION_UP_NUMBER(VALOR_LEITURA_PIN_SENSOR_1%10);
 2f2:	40 91 1f 01 	lds	r20, 0x011F	; 0x80011f <VALOR_LEITURA_PIN_SENSOR_1>
 2f6:	30 91 20 01 	lds	r19, 0x0120	; 0x800120 <VALOR_LEITURA_PIN_SENSOR_1+0x1>
 2fa:	24 2f       	mov	r18, r20
 2fc:	ad ec       	ldi	r26, 0xCD	; 205
 2fe:	bc ec       	ldi	r27, 0xCC	; 204
 300:	af d2       	rcall	.+1374   	; 0x860 <__umulhisi3>
 302:	96 95       	lsr	r25
 304:	87 95       	ror	r24
 306:	96 95       	lsr	r25
 308:	87 95       	ror	r24
 30a:	96 95       	lsr	r25
 30c:	87 95       	ror	r24
 30e:	9c 01       	movw	r18, r24
 310:	22 0f       	add	r18, r18
 312:	33 1f       	adc	r19, r19
 314:	88 0f       	add	r24, r24
 316:	99 1f       	adc	r25, r25
 318:	88 0f       	add	r24, r24
 31a:	99 1f       	adc	r25, r25
 31c:	88 0f       	add	r24, r24
 31e:	99 1f       	adc	r25, r25
 320:	82 0f       	add	r24, r18
 322:	93 1f       	adc	r25, r19
 324:	48 1b       	sub	r20, r24
 326:	84 2f       	mov	r24, r20
 328:	45 df       	rcall	.-374    	; 0x1b4 <DISPLAY_FUNCTION_UP_NUMBER>
 32a:	09 c0       	rjmp	.+18     	; 0x33e <__vector_16+0x134>
			}
			break;
			case 3:
			if(multiplexFlag){
 32c:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <multiplexFlag>
 330:	88 23       	and	r24, r24
 332:	19 f0       	breq	.+6      	; 0x33a <__vector_16+0x130>
				PORTB = DISPLAY_UP_L;
 334:	88 e3       	ldi	r24, 0x38	; 56
 336:	85 b9       	out	0x05, r24	; 5
 338:	02 c0       	rjmp	.+4      	; 0x33e <__vector_16+0x134>
				}else{
				PORTB = DISPLAY_UP_u;
 33a:	8c e1       	ldi	r24, 0x1C	; 28
 33c:	85 b9       	out	0x05, r24	; 5
			}
			break;
		}
		
	multiplexFlag ^=1;
 33e:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <multiplexFlag>
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	89 27       	eor	r24, r25
 346:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <multiplexFlag>
}
 34a:	ff 91       	pop	r31
 34c:	ef 91       	pop	r30
 34e:	bf 91       	pop	r27
 350:	af 91       	pop	r26
 352:	9f 91       	pop	r25
 354:	8f 91       	pop	r24
 356:	7f 91       	pop	r23
 358:	6f 91       	pop	r22
 35a:	5f 91       	pop	r21
 35c:	4f 91       	pop	r20
 35e:	3f 91       	pop	r19
 360:	2f 91       	pop	r18
 362:	0f 90       	pop	r0
 364:	0f be       	out	0x3f, r0	; 63
 366:	0f 90       	pop	r0
 368:	1f 90       	pop	r1
 36a:	18 95       	reti

0000036c <__vector_13>:
ISR(TIMER1_OVF_vect){			
 36c:	1f 92       	push	r1
 36e:	0f 92       	push	r0
 370:	0f b6       	in	r0, 0x3f	; 63
 372:	0f 92       	push	r0
 374:	11 24       	eor	r1, r1
 376:	2f 93       	push	r18
 378:	3f 93       	push	r19
 37a:	4f 93       	push	r20
 37c:	5f 93       	push	r21
 37e:	6f 93       	push	r22
 380:	7f 93       	push	r23
 382:	8f 93       	push	r24
 384:	9f 93       	push	r25
 386:	af 93       	push	r26
 388:	bf 93       	push	r27
 38a:	cf 93       	push	r28
 38c:	df 93       	push	r29
 38e:	ef 93       	push	r30
 390:	ff 93       	push	r31
		VALOR_LEITURA_PIN_SENSOR_0 = ((MAX_LEITURA_SENSOR_0 * Read_ADC(ADC2))/1023);
 392:	82 e0       	ldi	r24, 0x02	; 2
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	db de       	rcall	.-586    	; 0x14e <Read_ADC>
 398:	2c e3       	ldi	r18, 0x3C	; 60
 39a:	ac 01       	movw	r20, r24
 39c:	24 9f       	mul	r18, r20
 39e:	c0 01       	movw	r24, r0
 3a0:	25 9f       	mul	r18, r21
 3a2:	90 0d       	add	r25, r0
 3a4:	11 24       	eor	r1, r1
 3a6:	cf ef       	ldi	r28, 0xFF	; 255
 3a8:	d3 e0       	ldi	r29, 0x03	; 3
 3aa:	be 01       	movw	r22, r28
 3ac:	3f d2       	rcall	.+1150   	; 0x82c <__udivmodhi4>
 3ae:	70 93 22 01 	sts	0x0122, r23	; 0x800122 <VALOR_LEITURA_PIN_SENSOR_0+0x1>
 3b2:	60 93 21 01 	sts	0x0121, r22	; 0x800121 <VALOR_LEITURA_PIN_SENSOR_0>
		VALOR_LEITURA_PIN_SENSOR_1 = ((MAX_LEITURA_SENSOR_1 * Read_ADC(ADC3))/1023);				
 3b6:	83 e0       	ldi	r24, 0x03	; 3
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	c9 de       	rcall	.-622    	; 0x14e <Read_ADC>
 3bc:	22 e3       	ldi	r18, 0x32	; 50
 3be:	ac 01       	movw	r20, r24
 3c0:	24 9f       	mul	r18, r20
 3c2:	c0 01       	movw	r24, r0
 3c4:	25 9f       	mul	r18, r21
 3c6:	90 0d       	add	r25, r0
 3c8:	11 24       	eor	r1, r1
 3ca:	be 01       	movw	r22, r28
 3cc:	2f d2       	rcall	.+1118   	; 0x82c <__udivmodhi4>
 3ce:	70 93 20 01 	sts	0x0120, r23	; 0x800120 <VALOR_LEITURA_PIN_SENSOR_1+0x1>
 3d2:	60 93 1f 01 	sts	0x011F, r22	; 0x80011f <VALOR_LEITURA_PIN_SENSOR_1>
		if (countFlag>0x7){
 3d6:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <countFlag>
 3da:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <countFlag+0x1>
 3de:	08 97       	sbiw	r24, 0x08	; 8
 3e0:	48 f0       	brcs	.+18     	; 0x3f4 <__vector_13+0x88>
			STATE_MACHINE++;
 3e2:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
 3e6:	8f 5f       	subi	r24, 0xFF	; 255
 3e8:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
			countFlag=0;						
 3ec:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <countFlag+0x1>
 3f0:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <countFlag>
		}
		if(STATE_MACHINE>3){
 3f4:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
 3f8:	84 30       	cpi	r24, 0x04	; 4
 3fa:	30 f0       	brcs	.+12     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
			STATE_MACHINE=0;
 3fc:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <__data_end>
			countFlag=0;
 400:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <countFlag+0x1>
 404:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <countFlag>
		}	
		countFlag++;	
 408:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <countFlag>
 40c:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <countFlag+0x1>
 410:	01 96       	adiw	r24, 0x01	; 1
 412:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <countFlag+0x1>
 416:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <countFlag>
}
 41a:	ff 91       	pop	r31
 41c:	ef 91       	pop	r30
 41e:	df 91       	pop	r29
 420:	cf 91       	pop	r28
 422:	bf 91       	pop	r27
 424:	af 91       	pop	r26
 426:	9f 91       	pop	r25
 428:	8f 91       	pop	r24
 42a:	7f 91       	pop	r23
 42c:	6f 91       	pop	r22
 42e:	5f 91       	pop	r21
 430:	4f 91       	pop	r20
 432:	3f 91       	pop	r19
 434:	2f 91       	pop	r18
 436:	0f 90       	pop	r0
 438:	0f be       	out	0x3f, r0	; 63
 43a:	0f 90       	pop	r0
 43c:	1f 90       	pop	r1
 43e:	18 95       	reti

00000440 <__vector_21>:
ISR(ADC_vect){
 440:	1f 92       	push	r1
 442:	0f 92       	push	r0
 444:	0f b6       	in	r0, 0x3f	; 63
 446:	0f 92       	push	r0
 448:	11 24       	eor	r1, r1
	//ADC_READ_NUMBER = UDR0;
	//VALOR_LEITURA_PIN_SENSOR_0 = ((MAX_LEITURA_SENSOR_0 * ADC_READ_NUMBER)/1023);
}
 44a:	0f 90       	pop	r0
 44c:	0f be       	out	0x3f, r0	; 63
 44e:	0f 90       	pop	r0
 450:	1f 90       	pop	r1
 452:	18 95       	reti

00000454 <__vector_18>:
ISR(USART_RX_vect){
 454:	1f 92       	push	r1
 456:	0f 92       	push	r0
 458:	0f b6       	in	r0, 0x3f	; 63
 45a:	0f 92       	push	r0
 45c:	11 24       	eor	r1, r1
 45e:	2f 93       	push	r18
 460:	3f 93       	push	r19
 462:	4f 93       	push	r20
 464:	5f 93       	push	r21
 466:	6f 93       	push	r22
 468:	7f 93       	push	r23
 46a:	8f 93       	push	r24
 46c:	9f 93       	push	r25
 46e:	af 93       	push	r26
 470:	bf 93       	push	r27
 472:	ef 93       	push	r30
 474:	ff 93       	push	r31
	USART_RECEIVE_CHAR = USART_Receive();
 476:	63 d0       	rcall	.+198    	; 0x53e <USART_Receive>
 478:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <USART_RECEIVE_CHAR>
	switch(USART_RECEIVE_CHAR){
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	fc 01       	movw	r30, r24
 480:	f1 97       	sbiw	r30, 0x31	; 49
 482:	e4 34       	cpi	r30, 0x44	; 68
 484:	f1 05       	cpc	r31, r1
 486:	98 f5       	brcc	.+102    	; 0x4ee <__vector_18+0x9a>
 488:	e2 5c       	subi	r30, 0xC2	; 194
 48a:	ff 4f       	sbci	r31, 0xFF	; 255
 48c:	e3 c1       	rjmp	.+966    	; 0x854 <__tablejump2__>
		case 'a':			
			PORTC ^= 1<<PORTC4;
 48e:	98 b1       	in	r25, 0x08	; 8
 490:	80 e1       	ldi	r24, 0x10	; 16
 492:	89 27       	eor	r24, r25
 494:	88 b9       	out	0x08, r24	; 8
		break;
 496:	2e c0       	rjmp	.+92     	; 0x4f4 <__vector_18+0xa0>
		case 'b':
			PORTD ^= 1<<PORTD2;
 498:	9b b1       	in	r25, 0x0b	; 11
 49a:	84 e0       	ldi	r24, 0x04	; 4
 49c:	89 27       	eor	r24, r25
 49e:	8b b9       	out	0x0b, r24	; 11
		break;
 4a0:	29 c0       	rjmp	.+82     	; 0x4f4 <__vector_18+0xa0>
		case 'c':
			PORTD ^= 1<<PORTD4;
 4a2:	9b b1       	in	r25, 0x0b	; 11
 4a4:	80 e1       	ldi	r24, 0x10	; 16
 4a6:	89 27       	eor	r24, r25
 4a8:	8b b9       	out	0x0b, r24	; 11
		break;
 4aa:	24 c0       	rjmp	.+72     	; 0x4f4 <__vector_18+0xa0>
		case 't':
			USART_printf_int(VALOR_LEITURA_PIN_SENSOR_0);
 4ac:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <VALOR_LEITURA_PIN_SENSOR_0>
 4b0:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <VALOR_LEITURA_PIN_SENSOR_0+0x1>
 4b4:	5c d0       	rcall	.+184    	; 0x56e <USART_printf_int>
			USART_printfln(" °C");
 4b6:	80 e0       	ldi	r24, 0x00	; 0
 4b8:	91 e0       	ldi	r25, 0x01	; 1
 4ba:	49 d0       	rcall	.+146    	; 0x54e <USART_printfln>
 4bc:	1b c0       	rjmp	.+54     	; 0x4f4 <__vector_18+0xa0>
		break;
 4be:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <VALOR_LEITURA_PIN_SENSOR_1>
		case 'l':
			USART_printf_int(VALOR_LEITURA_PIN_SENSOR_1);
 4c2:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <VALOR_LEITURA_PIN_SENSOR_1+0x1>
 4c6:	53 d0       	rcall	.+166    	; 0x56e <USART_printf_int>
			USART_printfln(" Lu");
 4c8:	84 e0       	ldi	r24, 0x04	; 4
 4ca:	91 e0       	ldi	r25, 0x01	; 1
 4cc:	40 d0       	rcall	.+128    	; 0x54e <USART_printfln>
 4ce:	12 c0       	rjmp	.+36     	; 0x4f4 <__vector_18+0xa0>
		break;
 4d0:	86 e4       	ldi	r24, 0x46	; 70
		case '1':
			//SERVO_MOTOR_ENABLE_VELOCIDADE_1 = 1;
			OCR2A = 70;
 4d2:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 4d6:	0e c0       	rjmp	.+28     	; 0x4f4 <__vector_18+0xa0>
		break;
 4d8:	8e eb       	ldi	r24, 0xBE	; 190
		case '2':
			//SERVO_MOTOR_ENABLE_VELOCIDADE_2 = 1;
			OCR2A = 190;
 4da:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 4de:	0a c0       	rjmp	.+20     	; 0x4f4 <__vector_18+0xa0>
		break;
 4e0:	8a ef       	ldi	r24, 0xFA	; 250
		case '3':
			//SERVO_MOTOR_ENABLE_VELOCIDADE_3 = 1;
			OCR2A = 250;
 4e2:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 4e6:	06 c0       	rjmp	.+12     	; 0x4f4 <__vector_18+0xa0>
		break;
		case '4':
			//SERVO_MOTOR_ENABLE_VELOCIDADE_4 = 1;
			OCR2A = 0;
 4e8:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
		break;
 4ec:	03 c0       	rjmp	.+6      	; 0x4f4 <__vector_18+0xa0>
		default:
			USART_printfln("Alternativa Invalida");
 4ee:	88 e0       	ldi	r24, 0x08	; 8
 4f0:	91 e0       	ldi	r25, 0x01	; 1
 4f2:	2d d0       	rcall	.+90     	; 0x54e <USART_printfln>
 4f4:	ff 91       	pop	r31
		break;
	}
 4f6:	ef 91       	pop	r30
 4f8:	bf 91       	pop	r27
 4fa:	af 91       	pop	r26
 4fc:	9f 91       	pop	r25
 4fe:	8f 91       	pop	r24
 500:	7f 91       	pop	r23
 502:	6f 91       	pop	r22
 504:	5f 91       	pop	r21
 506:	4f 91       	pop	r20
 508:	3f 91       	pop	r19
 50a:	2f 91       	pop	r18
 50c:	0f 90       	pop	r0
 50e:	0f be       	out	0x3f, r0	; 63
 510:	0f 90       	pop	r0
 512:	1f 90       	pop	r1
 514:	18 95       	reti

00000516 <init_USART>:
 516:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
void USART_printf(unsigned char *String){
	int i=0;
	for(i=0;String[i]!=0;i++){
		USART_Transmit(String[i]);
	}
}
 51a:	87 e6       	ldi	r24, 0x67	; 103
 51c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 520:	88 e9       	ldi	r24, 0x98	; 152
 522:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 526:	8e e0       	ldi	r24, 0x0E	; 14
 528:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 52c:	08 95       	ret

0000052e <USART_Transmit>:
 52e:	e0 ec       	ldi	r30, 0xC0	; 192
 530:	f0 e0       	ldi	r31, 0x00	; 0
 532:	90 81       	ld	r25, Z
 534:	95 ff       	sbrs	r25, 5
 536:	fd cf       	rjmp	.-6      	; 0x532 <USART_Transmit+0x4>
 538:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 53c:	08 95       	ret

0000053e <USART_Receive>:
 53e:	e0 ec       	ldi	r30, 0xC0	; 192
 540:	f0 e0       	ldi	r31, 0x00	; 0
 542:	80 81       	ld	r24, Z
 544:	88 23       	and	r24, r24
 546:	ec f7       	brge	.-6      	; 0x542 <USART_Receive+0x4>
 548:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 54c:	08 95       	ret

0000054e <USART_printfln>:
void USART_printfln(unsigned char *String){
 54e:	cf 93       	push	r28
 550:	df 93       	push	r29
 552:	ec 01       	movw	r28, r24
	int i=0;
	for(i=0;String[i]!=0;i++){
 554:	88 81       	ld	r24, Y
 556:	88 23       	and	r24, r24
 558:	29 f0       	breq	.+10     	; 0x564 <USART_printfln+0x16>
 55a:	21 96       	adiw	r28, 0x01	; 1
		USART_Transmit(String[i]);
 55c:	e8 df       	rcall	.-48     	; 0x52e <USART_Transmit>
		USART_Transmit(String[i]);
	}
}
void USART_printfln(unsigned char *String){
	int i=0;
	for(i=0;String[i]!=0;i++){
 55e:	89 91       	ld	r24, Y+
 560:	81 11       	cpse	r24, r1
 562:	fc cf       	rjmp	.-8      	; 0x55c <USART_printfln+0xe>
		USART_Transmit(String[i]);
	}
	USART_Transmit(0x0D);
 564:	8d e0       	ldi	r24, 0x0D	; 13
 566:	e3 df       	rcall	.-58     	; 0x52e <USART_Transmit>
}
 568:	df 91       	pop	r29
 56a:	cf 91       	pop	r28
 56c:	08 95       	ret

0000056e <USART_printf_int>:
void USART_printf_int(unsigned int Valor){
 56e:	ef 92       	push	r14
 570:	ff 92       	push	r15
 572:	0f 93       	push	r16
 574:	1f 93       	push	r17
 576:	cf 93       	push	r28
 578:	df 93       	push	r29
 57a:	ec 01       	movw	r28, r24
		switch(Valor){
 57c:	84 36       	cpi	r24, 0x64	; 100
 57e:	91 05       	cpc	r25, r1
 580:	20 f4       	brcc	.+8      	; 0x58a <USART_printf_int+0x1c>
 582:	8a 30       	cpi	r24, 0x0A	; 10
 584:	91 05       	cpc	r25, r1
 586:	60 f0       	brcs	.+24     	; 0x5a0 <USART_printf_int+0x32>
 588:	54 c0       	rjmp	.+168    	; 0x632 <USART_printf_int+0xc4>
 58a:	88 3e       	cpi	r24, 0xE8	; 232
 58c:	23 e0       	ldi	r18, 0x03	; 3
 58e:	92 07       	cpc	r25, r18
 590:	08 f4       	brcc	.+2      	; 0x594 <USART_printf_int+0x26>
 592:	9d c0       	rjmp	.+314    	; 0x6ce <USART_printf_int+0x160>
 594:	80 31       	cpi	r24, 0x10	; 16
 596:	37 e2       	ldi	r19, 0x27	; 39
 598:	93 07       	cpc	r25, r19
 59a:	08 f4       	brcc	.+2      	; 0x59e <USART_printf_int+0x30>
 59c:	ed c0       	rjmp	.+474    	; 0x778 <USART_printf_int+0x20a>
 59e:	3f c1       	rjmp	.+638    	; 0x81e <USART_printf_int+0x2b0>
			case 0 ... 9:
			USART_Transmit((((Valor -(1000*(Valor/1000)))%100)%10)+'0');
 5a0:	9c 01       	movw	r18, r24
 5a2:	36 95       	lsr	r19
 5a4:	27 95       	ror	r18
 5a6:	36 95       	lsr	r19
 5a8:	27 95       	ror	r18
 5aa:	36 95       	lsr	r19
 5ac:	27 95       	ror	r18
 5ae:	a5 ec       	ldi	r26, 0xC5	; 197
 5b0:	b0 e2       	ldi	r27, 0x20	; 32
 5b2:	56 d1       	rcall	.+684    	; 0x860 <__umulhisi3>
 5b4:	92 95       	swap	r25
 5b6:	82 95       	swap	r24
 5b8:	8f 70       	andi	r24, 0x0F	; 15
 5ba:	89 27       	eor	r24, r25
 5bc:	9f 70       	andi	r25, 0x0F	; 15
 5be:	89 27       	eor	r24, r25
 5c0:	48 ee       	ldi	r20, 0xE8	; 232
 5c2:	53 e0       	ldi	r21, 0x03	; 3
 5c4:	84 9f       	mul	r24, r20
 5c6:	90 01       	movw	r18, r0
 5c8:	85 9f       	mul	r24, r21
 5ca:	30 0d       	add	r19, r0
 5cc:	94 9f       	mul	r25, r20
 5ce:	30 0d       	add	r19, r0
 5d0:	11 24       	eor	r1, r1
 5d2:	c2 1b       	sub	r28, r18
 5d4:	d3 0b       	sbc	r29, r19
 5d6:	9e 01       	movw	r18, r28
 5d8:	36 95       	lsr	r19
 5da:	27 95       	ror	r18
 5dc:	36 95       	lsr	r19
 5de:	27 95       	ror	r18
 5e0:	ab e7       	ldi	r26, 0x7B	; 123
 5e2:	b4 e1       	ldi	r27, 0x14	; 20
 5e4:	3d d1       	rcall	.+634    	; 0x860 <__umulhisi3>
 5e6:	96 95       	lsr	r25
 5e8:	87 95       	ror	r24
 5ea:	44 e6       	ldi	r20, 0x64	; 100
 5ec:	48 9f       	mul	r20, r24
 5ee:	90 01       	movw	r18, r0
 5f0:	49 9f       	mul	r20, r25
 5f2:	30 0d       	add	r19, r0
 5f4:	11 24       	eor	r1, r1
 5f6:	c2 1b       	sub	r28, r18
 5f8:	d3 0b       	sbc	r29, r19
 5fa:	9e 01       	movw	r18, r28
 5fc:	ad ec       	ldi	r26, 0xCD	; 205
 5fe:	bc ec       	ldi	r27, 0xCC	; 204
 600:	2f d1       	rcall	.+606    	; 0x860 <__umulhisi3>
 602:	96 95       	lsr	r25
 604:	87 95       	ror	r24
 606:	96 95       	lsr	r25
 608:	87 95       	ror	r24
 60a:	96 95       	lsr	r25
 60c:	87 95       	ror	r24
 60e:	9c 01       	movw	r18, r24
 610:	22 0f       	add	r18, r18
 612:	33 1f       	adc	r19, r19
 614:	88 0f       	add	r24, r24
 616:	99 1f       	adc	r25, r25
 618:	88 0f       	add	r24, r24
 61a:	99 1f       	adc	r25, r25
 61c:	88 0f       	add	r24, r24
 61e:	99 1f       	adc	r25, r25
 620:	82 0f       	add	r24, r18
 622:	93 1f       	adc	r25, r19
 624:	9e 01       	movw	r18, r28
 626:	28 1b       	sub	r18, r24
 628:	39 0b       	sbc	r19, r25
 62a:	c9 01       	movw	r24, r18
 62c:	80 5d       	subi	r24, 0xD0	; 208
 62e:	7f df       	rcall	.-258    	; 0x52e <USART_Transmit>
			break;
 630:	f6 c0       	rjmp	.+492    	; 0x81e <USART_printf_int+0x2b0>
			case 10 ... 99:
			USART_Transmit((((Valor -(1000*(Valor/1000)))%100)/10)+'0');
 632:	9c 01       	movw	r18, r24
 634:	36 95       	lsr	r19
 636:	27 95       	ror	r18
 638:	36 95       	lsr	r19
 63a:	27 95       	ror	r18
 63c:	36 95       	lsr	r19
 63e:	27 95       	ror	r18
 640:	a5 ec       	ldi	r26, 0xC5	; 197
 642:	b0 e2       	ldi	r27, 0x20	; 32
 644:	0d d1       	rcall	.+538    	; 0x860 <__umulhisi3>
 646:	92 95       	swap	r25
 648:	82 95       	swap	r24
 64a:	8f 70       	andi	r24, 0x0F	; 15
 64c:	89 27       	eor	r24, r25
 64e:	9f 70       	andi	r25, 0x0F	; 15
 650:	89 27       	eor	r24, r25
 652:	48 ee       	ldi	r20, 0xE8	; 232
 654:	53 e0       	ldi	r21, 0x03	; 3
 656:	84 9f       	mul	r24, r20
 658:	90 01       	movw	r18, r0
 65a:	85 9f       	mul	r24, r21
 65c:	30 0d       	add	r19, r0
 65e:	94 9f       	mul	r25, r20
 660:	30 0d       	add	r19, r0
 662:	11 24       	eor	r1, r1
 664:	c2 1b       	sub	r28, r18
 666:	d3 0b       	sbc	r29, r19
 668:	9e 01       	movw	r18, r28
 66a:	36 95       	lsr	r19
 66c:	27 95       	ror	r18
 66e:	36 95       	lsr	r19
 670:	27 95       	ror	r18
 672:	ab e7       	ldi	r26, 0x7B	; 123
 674:	b4 e1       	ldi	r27, 0x14	; 20
 676:	f4 d0       	rcall	.+488    	; 0x860 <__umulhisi3>
 678:	8c 01       	movw	r16, r24
 67a:	16 95       	lsr	r17
 67c:	07 95       	ror	r16
 67e:	24 e6       	ldi	r18, 0x64	; 100
 680:	20 9f       	mul	r18, r16
 682:	c0 01       	movw	r24, r0
 684:	21 9f       	mul	r18, r17
 686:	90 0d       	add	r25, r0
 688:	11 24       	eor	r1, r1
 68a:	8e 01       	movw	r16, r28
 68c:	08 1b       	sub	r16, r24
 68e:	19 0b       	sbc	r17, r25
 690:	98 01       	movw	r18, r16
 692:	ad ec       	ldi	r26, 0xCD	; 205
 694:	bc ec       	ldi	r27, 0xCC	; 204
 696:	e4 d0       	rcall	.+456    	; 0x860 <__umulhisi3>
 698:	ec 01       	movw	r28, r24
 69a:	d6 95       	lsr	r29
 69c:	c7 95       	ror	r28
 69e:	d6 95       	lsr	r29
 6a0:	c7 95       	ror	r28
 6a2:	d6 95       	lsr	r29
 6a4:	c7 95       	ror	r28
 6a6:	8c 2f       	mov	r24, r28
 6a8:	80 5d       	subi	r24, 0xD0	; 208
 6aa:	41 df       	rcall	.-382    	; 0x52e <USART_Transmit>
			USART_Transmit((((Valor -(1000*(Valor/1000)))%100)%10)+'0');
 6ac:	ce 01       	movw	r24, r28
 6ae:	88 0f       	add	r24, r24
 6b0:	99 1f       	adc	r25, r25
 6b2:	cc 0f       	add	r28, r28
 6b4:	dd 1f       	adc	r29, r29
 6b6:	cc 0f       	add	r28, r28
 6b8:	dd 1f       	adc	r29, r29
 6ba:	cc 0f       	add	r28, r28
 6bc:	dd 1f       	adc	r29, r29
 6be:	c8 0f       	add	r28, r24
 6c0:	d9 1f       	adc	r29, r25
 6c2:	c8 01       	movw	r24, r16
 6c4:	8c 1b       	sub	r24, r28
 6c6:	9d 0b       	sbc	r25, r29
 6c8:	80 5d       	subi	r24, 0xD0	; 208
 6ca:	31 df       	rcall	.-414    	; 0x52e <USART_Transmit>
			break;
 6cc:	a8 c0       	rjmp	.+336    	; 0x81e <USART_printf_int+0x2b0>
			
			case 100 ... 999:
			USART_Transmit((Valor - (Valor/1000)*1000)/100 + '0');
 6ce:	9c 01       	movw	r18, r24
 6d0:	36 95       	lsr	r19
 6d2:	27 95       	ror	r18
 6d4:	36 95       	lsr	r19
 6d6:	27 95       	ror	r18
 6d8:	36 95       	lsr	r19
 6da:	27 95       	ror	r18
 6dc:	a5 ec       	ldi	r26, 0xC5	; 197
 6de:	b0 e2       	ldi	r27, 0x20	; 32
 6e0:	bf d0       	rcall	.+382    	; 0x860 <__umulhisi3>
 6e2:	7c 01       	movw	r14, r24
 6e4:	f6 94       	lsr	r15
 6e6:	e7 94       	ror	r14
 6e8:	f6 94       	lsr	r15
 6ea:	e7 94       	ror	r14
 6ec:	f6 94       	lsr	r15
 6ee:	e7 94       	ror	r14
 6f0:	f6 94       	lsr	r15
 6f2:	e7 94       	ror	r14
 6f4:	28 ee       	ldi	r18, 0xE8	; 232
 6f6:	33 e0       	ldi	r19, 0x03	; 3
 6f8:	e2 9e       	mul	r14, r18
 6fa:	c0 01       	movw	r24, r0
 6fc:	e3 9e       	mul	r14, r19
 6fe:	90 0d       	add	r25, r0
 700:	f2 9e       	mul	r15, r18
 702:	90 0d       	add	r25, r0
 704:	11 24       	eor	r1, r1
 706:	7e 01       	movw	r14, r28
 708:	e8 1a       	sub	r14, r24
 70a:	f9 0a       	sbc	r15, r25
 70c:	97 01       	movw	r18, r14
 70e:	36 95       	lsr	r19
 710:	27 95       	ror	r18
 712:	36 95       	lsr	r19
 714:	27 95       	ror	r18
 716:	ab e7       	ldi	r26, 0x7B	; 123
 718:	b4 e1       	ldi	r27, 0x14	; 20
 71a:	a2 d0       	rcall	.+324    	; 0x860 <__umulhisi3>
 71c:	8c 01       	movw	r16, r24
 71e:	16 95       	lsr	r17
 720:	07 95       	ror	r16
 722:	80 e3       	ldi	r24, 0x30	; 48
 724:	80 0f       	add	r24, r16
 726:	03 df       	rcall	.-506    	; 0x52e <USART_Transmit>
			USART_Transmit((((Valor -(1000*(Valor/1000)))%100)/10)+'0');
 728:	24 e6       	ldi	r18, 0x64	; 100
 72a:	20 9f       	mul	r18, r16
 72c:	c0 01       	movw	r24, r0
 72e:	21 9f       	mul	r18, r17
 730:	90 0d       	add	r25, r0
 732:	11 24       	eor	r1, r1
 734:	e7 01       	movw	r28, r14
 736:	c8 1b       	sub	r28, r24
 738:	d9 0b       	sbc	r29, r25
 73a:	9e 01       	movw	r18, r28
 73c:	ad ec       	ldi	r26, 0xCD	; 205
 73e:	bc ec       	ldi	r27, 0xCC	; 204
 740:	8f d0       	rcall	.+286    	; 0x860 <__umulhisi3>
 742:	8c 01       	movw	r16, r24
 744:	16 95       	lsr	r17
 746:	07 95       	ror	r16
 748:	16 95       	lsr	r17
 74a:	07 95       	ror	r16
 74c:	16 95       	lsr	r17
 74e:	07 95       	ror	r16
 750:	80 e3       	ldi	r24, 0x30	; 48
 752:	80 0f       	add	r24, r16
 754:	ec de       	rcall	.-552    	; 0x52e <USART_Transmit>
			USART_Transmit((((Valor -(1000*(Valor/1000)))%100)%10)+'0');
 756:	c8 01       	movw	r24, r16
 758:	88 0f       	add	r24, r24
 75a:	99 1f       	adc	r25, r25
 75c:	00 0f       	add	r16, r16
 75e:	11 1f       	adc	r17, r17
 760:	00 0f       	add	r16, r16
 762:	11 1f       	adc	r17, r17
 764:	00 0f       	add	r16, r16
 766:	11 1f       	adc	r17, r17
 768:	08 0f       	add	r16, r24
 76a:	19 1f       	adc	r17, r25
 76c:	ce 01       	movw	r24, r28
 76e:	80 1b       	sub	r24, r16
 770:	91 0b       	sbc	r25, r17
 772:	80 5d       	subi	r24, 0xD0	; 208
			break;
 774:	dc de       	rcall	.-584    	; 0x52e <USART_Transmit>
			
			case 1000 ... 9999:
			USART_Transmit(Valor/1000 + '0');
 776:	53 c0       	rjmp	.+166    	; 0x81e <USART_printf_int+0x2b0>
 778:	9c 01       	movw	r18, r24
 77a:	36 95       	lsr	r19
 77c:	27 95       	ror	r18
 77e:	36 95       	lsr	r19
 780:	27 95       	ror	r18
 782:	36 95       	lsr	r19
 784:	27 95       	ror	r18
 786:	a5 ec       	ldi	r26, 0xC5	; 197
 788:	b0 e2       	ldi	r27, 0x20	; 32
 78a:	6a d0       	rcall	.+212    	; 0x860 <__umulhisi3>
 78c:	8c 01       	movw	r16, r24
 78e:	12 95       	swap	r17
 790:	02 95       	swap	r16
 792:	0f 70       	andi	r16, 0x0F	; 15
 794:	01 27       	eor	r16, r17
 796:	1f 70       	andi	r17, 0x0F	; 15
 798:	01 27       	eor	r16, r17
 79a:	80 e3       	ldi	r24, 0x30	; 48
 79c:	80 0f       	add	r24, r16
 79e:	c7 de       	rcall	.-626    	; 0x52e <USART_Transmit>
			USART_Transmit((Valor - (Valor/1000)*1000)/100 + '0');
 7a0:	28 ee       	ldi	r18, 0xE8	; 232
 7a2:	33 e0       	ldi	r19, 0x03	; 3
 7a4:	02 9f       	mul	r16, r18
 7a6:	c0 01       	movw	r24, r0
 7a8:	03 9f       	mul	r16, r19
 7aa:	90 0d       	add	r25, r0
 7ac:	12 9f       	mul	r17, r18
 7ae:	90 0d       	add	r25, r0
 7b0:	11 24       	eor	r1, r1
 7b2:	c8 1b       	sub	r28, r24
 7b4:	d9 0b       	sbc	r29, r25
 7b6:	9e 01       	movw	r18, r28
 7b8:	36 95       	lsr	r19
 7ba:	27 95       	ror	r18
 7bc:	36 95       	lsr	r19
 7be:	27 95       	ror	r18
 7c0:	ab e7       	ldi	r26, 0x7B	; 123
 7c2:	b4 e1       	ldi	r27, 0x14	; 20
 7c4:	4d d0       	rcall	.+154    	; 0x860 <__umulhisi3>
 7c6:	8c 01       	movw	r16, r24
 7c8:	16 95       	lsr	r17
 7ca:	07 95       	ror	r16
 7cc:	80 e3       	ldi	r24, 0x30	; 48
 7ce:	80 0f       	add	r24, r16
			USART_Transmit((((Valor -(1000*(Valor/1000)))%100)/10)+'0');
 7d0:	ae de       	rcall	.-676    	; 0x52e <USART_Transmit>
 7d2:	24 e6       	ldi	r18, 0x64	; 100
 7d4:	20 9f       	mul	r18, r16
 7d6:	c0 01       	movw	r24, r0
 7d8:	21 9f       	mul	r18, r17
 7da:	90 0d       	add	r25, r0
 7dc:	11 24       	eor	r1, r1
 7de:	c8 1b       	sub	r28, r24
 7e0:	d9 0b       	sbc	r29, r25
 7e2:	9e 01       	movw	r18, r28
 7e4:	ad ec       	ldi	r26, 0xCD	; 205
 7e6:	bc ec       	ldi	r27, 0xCC	; 204
 7e8:	3b d0       	rcall	.+118    	; 0x860 <__umulhisi3>
 7ea:	8c 01       	movw	r16, r24
 7ec:	16 95       	lsr	r17
 7ee:	07 95       	ror	r16
 7f0:	16 95       	lsr	r17
 7f2:	07 95       	ror	r16
 7f4:	16 95       	lsr	r17
 7f6:	07 95       	ror	r16
 7f8:	80 e3       	ldi	r24, 0x30	; 48
 7fa:	80 0f       	add	r24, r16
			USART_Transmit((((Valor -(1000*(Valor/1000)))%100)%10)+'0');
 7fc:	98 de       	rcall	.-720    	; 0x52e <USART_Transmit>
 7fe:	c8 01       	movw	r24, r16
 800:	88 0f       	add	r24, r24
 802:	99 1f       	adc	r25, r25
 804:	00 0f       	add	r16, r16
 806:	11 1f       	adc	r17, r17
 808:	00 0f       	add	r16, r16
 80a:	11 1f       	adc	r17, r17
 80c:	00 0f       	add	r16, r16
 80e:	11 1f       	adc	r17, r17
 810:	08 0f       	add	r16, r24
 812:	19 1f       	adc	r17, r25
 814:	ce 01       	movw	r24, r28
 816:	80 1b       	sub	r24, r16
 818:	91 0b       	sbc	r25, r17
 81a:	80 5d       	subi	r24, 0xD0	; 208
 81c:	88 de       	rcall	.-752    	; 0x52e <USART_Transmit>
			break;
		}
 81e:	df 91       	pop	r29
 820:	cf 91       	pop	r28
 822:	1f 91       	pop	r17
 824:	0f 91       	pop	r16
 826:	ff 90       	pop	r15
 828:	ef 90       	pop	r14
 82a:	08 95       	ret

0000082c <__udivmodhi4>:
 82c:	aa 1b       	sub	r26, r26
 82e:	bb 1b       	sub	r27, r27
 830:	51 e1       	ldi	r21, 0x11	; 17
 832:	07 c0       	rjmp	.+14     	; 0x842 <__udivmodhi4_ep>

00000834 <__udivmodhi4_loop>:
 834:	aa 1f       	adc	r26, r26
 836:	bb 1f       	adc	r27, r27
 838:	a6 17       	cp	r26, r22
 83a:	b7 07       	cpc	r27, r23
 83c:	10 f0       	brcs	.+4      	; 0x842 <__udivmodhi4_ep>
 83e:	a6 1b       	sub	r26, r22
 840:	b7 0b       	sbc	r27, r23

00000842 <__udivmodhi4_ep>:
 842:	88 1f       	adc	r24, r24
 844:	99 1f       	adc	r25, r25
 846:	5a 95       	dec	r21
 848:	a9 f7       	brne	.-22     	; 0x834 <__udivmodhi4_loop>
 84a:	80 95       	com	r24
 84c:	90 95       	com	r25
 84e:	bc 01       	movw	r22, r24
 850:	cd 01       	movw	r24, r26
 852:	08 95       	ret

00000854 <__tablejump2__>:
 854:	ee 0f       	add	r30, r30
 856:	ff 1f       	adc	r31, r31
 858:	05 90       	lpm	r0, Z+
 85a:	f4 91       	lpm	r31, Z
 85c:	e0 2d       	mov	r30, r0
 85e:	09 94       	ijmp

00000860 <__umulhisi3>:
 860:	a2 9f       	mul	r26, r18
 862:	b0 01       	movw	r22, r0
 864:	b3 9f       	mul	r27, r19
 866:	c0 01       	movw	r24, r0
 868:	a3 9f       	mul	r26, r19
 86a:	70 0d       	add	r23, r0
 86c:	81 1d       	adc	r24, r1
 86e:	11 24       	eor	r1, r1
 870:	91 1d       	adc	r25, r1
 872:	b2 9f       	mul	r27, r18
 874:	70 0d       	add	r23, r0
 876:	81 1d       	adc	r24, r1
 878:	11 24       	eor	r1, r1
 87a:	91 1d       	adc	r25, r1
 87c:	08 95       	ret

0000087e <_exit>:
 87e:	f8 94       	cli

00000880 <__stop_program>:
 880:	ff cf       	rjmp	.-2      	; 0x880 <__stop_program>
